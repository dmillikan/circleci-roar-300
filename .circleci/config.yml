version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.6

  sls:
    executors:
      default:
        parameters:
          tag:
            type: string
            default: "12.22"
        docker:
          - image: cimg/node:<< parameters.tag >>
    commands:
      deploy:
        parameters:
          environment:
            type: string
        steps:
          - run:
              name: Serverless Deploy << parameters.environment >>
              environment:
                DEPLOY_ENVIRONMENT: << parameters.environment >>
              command: yarn run sls deploy --stage $DEPLOY_ENVIRONMENT
      package:
        parameters:
          environment:
            type: string
        steps:
          - run:
              name: Serverless Deploy << parameters.environment >>
              environment:
                DEPLOY_ENVIRONMENT: << parameters.environment >>
              command: yarn run sls package --stage $DEPLOY_ENVIRONMENT
    jobs:
      main:
        executor: default
        resource_class: small
        parameters:
          environment:
            type: string
          action:
            type: enum
            enum: [deploy,package]
          pre-deployment-steps:
            type: steps
            default: []
        steps:
          - steps: << parameters.pre-deployment-steps >>
          - when:
              condition:
                equal: [deploy, << parameters.action >>]
              steps:
                - deploy:
                    environment: << parameters.environment >>      
          - when:
              condition:
                equal: [package, << parameters.action >>]
              steps:
                - package:
                    environment: << parameters.environment >>

  runway:
    executors:
      default:
        parameters:
          tag:
            type: string
            default: "3.8.9"
        docker:
          - image: cimg/python:<< parameters.tag >>
            environment:
              PIPENV_VENV_IN_PROJECT: true
    commands:        
      deploy:
        parameters:
          environment:
            type: string
        steps:
          - run:
              name: Deploy << parameters.environment >>
              environment:
                DEPLOY_ENVIRONMENT: << parameters.environment >>
              command: pipenv run runway deploy
      plan:
        parameters:
          environment:
            type: string
        steps:
          - run:
              name: Deploy << parameters.environment >>
              environment:
                DEPLOY_ENVIRONMENT: << parameters.environment >>
              command: pipenv run runway plan
    jobs:
      main:
        executor: default
        resource_class: small
        parameters:
          environment:
            type: string
          action:
            type: enum
            enum: [deploy,plan]
          pre-deployment-steps:
            type: steps
            default: []
        steps:
          - steps: << parameters.pre-deployment-steps >>
          - when:
              condition:
                equal: [deploy, << parameters.action >>]
              steps:
                - deploy:
                    environment: << parameters.environment >>      
          - when:
              condition:
                equal: [plan, << parameters.action >>]
              steps:
                - plan:
                    environment: << parameters.environment >>

commands:
  setup-yarn-cache:
    steps:
      - restore_cache:
          name: Restoring Yarn Package Cache
          key: &yarncache yarn-packages-v1-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          name: Caching Yarn Packages
          key: *yarncache
          paths:
            - ~/.cache/yarn
            - node_modules

  setup-pip-cache:
    steps:
      - restore_cache:
          name: Restoring pip cache
          key: &pipcachekey pipcache-v1-pyv3-8-9-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            pip install pipenv
            pipenv sync
      - save_cache:
          key: *pipcachekey
          paths:
            - ".venv"

  make-bucket:
    parameters:
      bucket-name:
        type: string
    steps:
      - run:
          name: Make Bucket << parameters.bucket-name >>
          command: |
            if [ $(aws s3 ls | grep "<< parameters.bucket-name >>" | wc -l) -eq 0 ]
            then
                aws s3 mb "s3://<< parameters.bucket-name >>"
                if [ $? -eq 0 ]
                then
                    echo "Deployment Bucket Created Successfully"
                else
                    echo "Deployment Bucket Exists in Other AWS Account"
                    exit 1
                fi
            else
              echo "Deployment Bucket Already Exists in AWS Account"
            fi

  custom-checkout:
    parameters:
      merge:
        type: boolean
        default: false
    steps:
      - checkout
      - when:
          condition: << parameters.merge >>
          steps:
            - run:
                name: Merge Pull Request
                command: chmod +x .circleci/git-pr-merge.sh && .circleci/git-pr-merge.sh

jobs:
  setup:
    executor: aws-cli/default
    resource_class: small
    steps:
      - aws-cli/install
      - make-bucket:
          bucket-name: $DEPLOYMENT_BUCKET
  validate:
    executor: aws-cli/default
    resource_class: small
    parameters:
      environment:
        type: string
      merge:
        type: boolean
        default: false
    steps:
      - custom-checkout:
          merge: << parameters.merge >>
      - aws-cli/install
      - run:
          name: Validate << parameters.environment >>
          environment:
            DEPLOY_ENVIRONMENT: << parameters.environment >>
          working_directory: .circleci
          command: chmod +x validate.sh && ./validate.sh

workflows:
  branch-workflow:
    when:
      not: << pipeline.git.tag >>
    jobs:
      - setup:
          context: &context AWS_DEV_CREDENTIALS
      - runway/main: &runway
          name: Plan Runway
          context: *context
          environment: &env pre
          action: plan
          pre-deployment-steps:
            - custom-checkout:
                merge: true
            - aws-cli/install
            - setup-pip-cache
          filters: &filters
            branches:
              only:
                - /^feature\/.*/
          requires:
            - setup
      - sls/main: &sls
          name: Package Serverless
          context: *context
          environment: *env
          action: package
          pre-deployment-steps:
            - custom-checkout:
                merge: true
            - aws-cli/install
            - setup-yarn-cache
          filters: *filters
          requires:
            - setup
      - runway/main: 
          <<: *runway
          name: Deploy Runway
          action: deploy
          filters: &deployFilters
            branches:
              only:
                - main
      - sls/main:
          <<: *sls
          name: Deploy Serverless
          action: deploy
          filters: *deployFilters
      - validate:
          name: Validate Dev
          context: AWS_DEV_CREDENTIALS
          environment: pre
          requires: 
            - Deploy Runway
            - Deploy Serverless
  
  tag-workflow:
    when: << pipeline.git.tag >>
    jobs:
      - setup:
          context: &context AWS_PROD_CREDENTIALS
          filters: &filters
            tags:
              only: /([1-9][0-9]+|[0-9])\.([1-9][0-9]+|[0-9])\.([1-9][0-9]+|[0-9])/
      - runway/main:
          <<: *runway
          action: &action deploy
          context: *context
          environment: &env prod
          filters: *filters
      - sls/main:
          <<: *sls
          context: *context
          action: *action
          environment: *env
          filters: *filters
