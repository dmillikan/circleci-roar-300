version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.6
  slack: circleci/slack@4.8.1
  sls:
    executors:
      default:
        parameters:
          tag:
            type: string
            default: "12.22"
        docker:
          - image: cimg/node:<< parameters.tag >>
    commands:
      deploy:
        parameters:
          environment:
            type: string
        steps:
          - run:
              name: Serverless Deploy << parameters.environment >>
              environment:
                DEPLOY_ENVIRONMENT: << parameters.environment >>
              command: yarn run sls deploy --stage $DEPLOY_ENVIRONMENT
      package:
        parameters:
          environment:
            type: string
        steps:
          - run:
              name: Serverless Package (Plan) << parameters.environment >>
              environment:
                DEPLOY_ENVIRONMENT: << parameters.environment >>
              command: yarn run sls package --stage $DEPLOY_ENVIRONMENT
    jobs:
      main:
        executor: default
        resource_class: small
        parameters:
          environment:
            type: string
          action:
            type: enum
            enum: [deploy,plan]
          pre-deployment-steps:
            type: steps
            default: []
          post-deployment-steps:
            type: steps
            default: []
        steps:
          - steps: << parameters.pre-deployment-steps >>
          - when:
              condition:
                equal: [deploy, << parameters.action >>]
              steps:
                - deploy:
                    environment: << parameters.environment >>      
          - when:
              condition:
                equal: [plan, << parameters.action >>]
              steps:
                - package:
                    environment: << parameters.environment >>
          - steps: << parameters.post-deployment-steps >>
  runway:
    executors:
      default:
        parameters:
          tag:
            type: string
            default: "3.8.9"
        docker:
          - image: cimg/python:<< parameters.tag >>
            environment:
              PIPENV_VENV_IN_PROJECT: true
    commands:        
      deploy:
        parameters:
          environment:
            type: string
        steps:
          - run:
              name: Runway Deploy << parameters.environment >>
              environment:
                DEPLOY_ENVIRONMENT: << parameters.environment >>
              command: pipenv run runway deploy
      plan:
        parameters:
          environment:
            type: string
        steps:
          - run:
              name: Runway Plan << parameters.environment >>
              environment:
                DEPLOY_ENVIRONMENT: << parameters.environment >>
              command: pipenv run runway plan
    jobs:
      main:
        executor: default
        resource_class: small
        parameters:
          environment:
            type: string
          action:
            type: enum
            enum: [deploy,plan]
          pre-deployment-steps:
            type: steps
            default: []
          post-deployment-steps:
            type: steps
            default: []
        steps:
          - steps: << parameters.pre-deployment-steps >>
          - when:
              condition:
                equal: [deploy, << parameters.action >>]
              steps:
                - deploy:
                    environment: << parameters.environment >>      
          - when:
              condition:
                equal: [plan, << parameters.action >>]
              steps:
                - plan:
                    environment: << parameters.environment >>
          - steps: << parameters.post-deployment-steps >>

parameters:
  environment:
    type: string
    default: "pre"
  aws-credentials-context:
    type: string
    default: "AWS_DEV_CREDENTIALS"
  workflow-name:
    type: string
    default: "router"
  action:
    type: string
    default: "plan"

commands:
  setup-yarn-cache:
    steps:
      - restore_cache:
          name: Restoring Yarn Package Cache
          key: &yarncache yarn-packages-v1-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          name: Caching Yarn Packages
          key: *yarncache
          paths:
            - ~/.cache/yarn
            - node_modules

  setup-pip-cache:
    steps:
      - restore_cache:
          name: Restoring pip cache
          key: &pipcachekey pipcache-v1-pyv3-8-9-{{ checksum "Pipfile.lock" }}
      - run:
          command: |
            pip install pipenv
            pipenv sync
      - save_cache:
          key: *pipcachekey
          paths:
            - ".venv"

  make-bucket:
    parameters:
      bucket-name:
        type: string
    steps:
      - run:
          name: Make Bucket << parameters.bucket-name >>
          command: |
            if [ $(aws s3 ls | grep "<< parameters.bucket-name >>" | wc -l) -eq 0 ]
            then
                aws s3 mb "s3://<< parameters.bucket-name >>"
                if [ $? -eq 0 ]
                then
                    echo "Deployment Bucket Created Successfully"
                else
                    echo "Deployment Bucket Exists in Other AWS Account"
                    exit 1
                fi
            else
              echo "Deployment Bucket Already Exists in AWS Account"
            fi

  custom-checkout:
    parameters:
      merge:
        type: boolean
        default: false
    steps:
      - checkout
      - when:
          condition: << parameters.merge >>
          steps:
            - run:
                name: Merge Pull Request
                command: chmod +x .circleci/git-pr-merge.sh && .circleci/git-pr-merge.sh

jobs:
  setup:
    executor: aws-cli/default
    resource_class: small
    steps:
      - custom-checkout:
          merge: true
      - aws-cli/install
      - make-bucket:
          bucket-name: $DEPLOYMENT_BUCKET
      - run:
          name: Test API
          working_directory: .circleci
          command: chmod +x get-project-api.sh && ./get-project-api.sh
      - slack/notify: &slack-fail
          channel: C032Z0VEF6J
          event: fail
          template: basic_fail_1
  validate:
    executor: aws-cli/default
    resource_class: small
    parameters:
      environment:
        type: string
      merge:
        type: boolean
        default: false
    steps:
      - custom-checkout:
          merge: << parameters.merge >>
      - aws-cli/install
      - run:
          name: Validate << parameters.environment >>
          environment:
            DEPLOY_ENVIRONMENT: << parameters.environment >>
          working_directory: .circleci
          command: chmod +x validate.sh && ./validate.sh
      - slack/notify:
          channel: C032Z0VEF6J
          event: pass
          template: basic_success_1
      - slack/notify: *slack-fail
  trigger-workflow:
    executor: aws-cli/default
    resource_class: small
    parameters:
      environment:
        type: string
      aws-credentials-context:
        type: string
      workflow-name:
        type: string
      action:
        type: string        
    steps:
      - custom-checkout:
          merge: true
      - run:
          name: Trigger workflow
          working_directory: .circleci
          command: chmod +x trigger-pipeline-api.sh && ./trigger-pipeline-api.sh

workflows:
  router:
    when:
      and:
        - equal:
            - "router"
            - << pipeline.parameters.workflow-name >>
        - or:
            - << pipeline.git.tag >>
            - << pipeline.git.branch >>
    jobs:
      - trigger-workflow:
          environment: "pre"
          aws-credentials-context: "AWS_DEV_CREDENTIALS"
          workflow-name: "main"
          action: "plan"
          filters:
            branches:
              ignore:
                - main
      - trigger-workflow:
          environment: "pre"
          aws-credentials-context: "AWS_DEV_CREDENTIALS"
          workflow-name: "main"
          action: "deploy"
          filters:
            branches:
              only:
                - main
      - trigger-workflow:
          environment: "preprod"
          aws-credentials-context: "AWS_PROD_CREDENTIALS"
          workflow-name: "main"
          action: deploy
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /([1-9][0-9]+|[0-9])\.([1-9][0-9]+|[0-9])\.([1-9][0-9]+|[0-9])/
  
  main:
    when:
      and:
        - equal:
            - "main"
            - << pipeline.parameters.workflow-name >>
        - or:
            - << pipeline.git.tag >>
            - << pipeline.git.branch >>
    jobs:
      - setup:
          context: &context
            - << pipeline.parameters.aws-credential-context >>
            - SLACK
          filters: &filters
            branches:
              only:
                - /.*/
            tags:
              only:
                - /.*/
      - runway/main:
          name: << pipeline.parameters.action >> Runway
          context: *context
          environment: &env << pipeline.parameters.environment >>
          action: &action << pipeline.parameters.action >>
          pre-deployment-steps:
            - custom-checkout:
                merge: true
            - aws-cli/install
            - setup-pip-cache
          post-deployment-steps:
            - slack/notify: *slack-fail
          filters: *filters
          requires:
            - setup
      - sls/main:
          name: << pipeline.parameters.action >> Serverless
          context: *context
          environment: *env
          action: *action
          pre-deployment-steps:
            - custom-checkout:
                merge: true
            - aws-cli/install
            - setup-yarn-cache
          post-deployment-steps:
            - slack/notify: *slack-fail
          filters: *filters
          requires:
            - setup  
      - validate:
          name: Validate << pipeline.parameters.environment >>
          context: *context
          environment: *env
          filters:
            branches:
              only:
                - "main"
          requires: 
            - runway/main
            - sls/main  

  # branch-workflow:
  #   when:
  #     and:
  #       - equal:
  #           - "branch-workflow"
  #           - << pipeline.parameters.workflow-name >>
  #       - or:
  #           - << pipeline.git.tag >>
  #           - << pipeline.git.branch >>
  #   jobs:
  #     - setup:
  #         context:
  #           - << pipeline.parameters.aws-credential-context >>
  #           - SLACK
  #     - runway/main:
  #         name: Plan Runway
  #         context: *context
  #         environment: &env << pipeline.parameters.environment >>
  #         action: plan
  #         pre-deployment-steps:
  #           - custom-checkout:
  #               merge: true
  #           - aws-cli/install
  #           - setup-pip-cache
  #         post-deployment-steps:
  #           - slack/notify: *slack-fail
  #         filters: &filters
  #           branches:
  #             only:
  #               - /^feature\/.*/
  #         requires:
  #           - setup
  #     - sls/main: &sls
  #         name: Package Serverless
  #         context: *context
  #         environment: *env
  #         action: package
  #         pre-deployment-steps:
  #           - custom-checkout:
  #               merge: true
  #           - aws-cli/install
  #           - setup-yarn-cache
  #         post-deployment-steps:
  #           - slack/notify: *slack-fail
  #         filters: *filters
  #         requires:
  #           - setup
  #     - runway/main: 
  #         <<: *runway
  #         name: Deploy Runway
  #         action: deploy
  #         filters: &deployFilters
  #           branches:
  #             only:
  #               - main
  #     - sls/main:
  #         <<: *sls
  #         name: Deploy Serverless
  #         action: deploy
  #         filters: *deployFilters
  #     - validate:
  #         name: Validate Dev
  #         context: *context
  #         environment: *env
  #         requires: 
  #           - Deploy Runway
  #           - Deploy Serverless
  
  # tag-workflow:
  #   # when: << pipeline.git.tag >>
  #   when:
  #     equal:
  #       - "tag-workflow"
  #       - << pipeline.parameters.workflow-name >>
  #   jobs:
  #     - setup:
  #         context: &context 
  #           - AWS_PROD_CREDENTIALS
  #           - SLACK
  #         filters: &filters
  #           tags:
  #             only: /([1-9][0-9]+|[0-9])\.([1-9][0-9]+|[0-9])\.([1-9][0-9]+|[0-9])/
  #     # - runway/main:
  #     #     <<: *runway
  #     #     name: Deploy Runway for version << pipeline.git.tag >>
  #     #     action: &action deploy
  #     #     context: *context
  #     #     environment: &env preprod
  #     #     filters: *filters
  #     # - sls/main:
  #     #     <<: *sls
  #     #     name: Deploy Serverless for version << pipeline.git.tag >>
  #     #     context: *context
  #     #     action: *action
  #     #     environment: *env
  #     #     filters: *filters
  #     #     post-deployment-steps:
  #     #       - slack/notify:
  #     #           channel: C032Z0VEF6J
  #     #           event: pass
  #     #           template: success_tagged_deploy_1
  #     #       - slack/notify: *slack-fail